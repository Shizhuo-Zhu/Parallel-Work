{"ast":null,"code":"var _jsxFileName = \"/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResourceTable = () => {\n  _s();\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [regionFilter, setRegionFilter] = useState(''); // State to hold region filter\n  const [typeFilter, setTypeFilter] = useState(''); // State to hold type filter\n\n  // Function to fetch all resources with optional filters\n  const fetchAllResources = () => {\n    const apiUrl = `http://localhost:8080/api/resources?region=${regionFilter}&type=${typeFilter}`; // Include filters in the URL\n    setLoading(true);\n    axios.get(apiUrl).then(response => {\n      console.log('Fetched all resources:', response.data); // Debugging\n      setResources(response.data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching resources:', error); // Debugging\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n\n  // Function to fetch a specific resource by ID\n  const fetchResourceByID = id => {\n    const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n    setLoading(true);\n    axios.get(apiUrl).then(response => {\n      console.log('Fetched resource by ID:', response.data); // Debugging\n      setResources([response.data]); // Set the response as the only resource in the list\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching resource by ID:', error); // Debugging\n      setError('Failed to fetch resource by ID');\n      setLoading(false);\n    });\n  };\n  const handleRegionChange = event => {\n    setRegionFilter(event.target.value); // Update the region filter as the user types\n  };\n  const handleTypeChange = event => {\n    setTypeFilter(event.target.value); // Update the type filter as the user types\n  };\n  const handleIDChange = event => {\n    setResourceID(event.target.value); // Update the resource ID as the user types\n  };\n  const handleFetchByID = () => {\n    if (resourceID) {\n      setLoading(true); // Set loading state\n      fetchResourceByID(resourceID); // Fetch the resource by ID\n    } else {\n      setError('Please enter a valid resource ID');\n    }\n  };\n  const handleSearch = () => {\n    fetchAllResources(); // Trigger search when the button is clicked\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: regionFilter,\n        onChange: handleRegionChange,\n        placeholder: \"Search by Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: typeFilter,\n        onChange: handleTypeChange,\n        placeholder: \"Search by Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceID,\n        onChange: handleIDChange,\n        placeholder: \"Enter Resource ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchByID,\n        children: \"Fetch Resource by ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), resources.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: resources.map(resource => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.zone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.status || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.creationTimestamp || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this)]\n        }, resource.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(ResourceTable, \"Tyog3P2p1U1RA/T4PQcCBS4hRZk=\");\n_c = ResourceTable;\nexport default ResourceTable;\nvar _c;\n$RefreshReg$(_c, \"ResourceTable\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ResourceTable","_s","resources","setResources","loading","setLoading","error","setError","resourceID","setResourceID","regionFilter","setRegionFilter","typeFilter","setTypeFilter","fetchAllResources","apiUrl","get","then","response","console","log","data","catch","fetchResourceByID","id","handleRegionChange","event","target","value","handleTypeChange","handleIDChange","handleFetchByID","handleSearch","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","length","map","resource","name","zone","status","ipAddresses","join","creationTimestamp","_c","$RefreshReg$"],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst ResourceTable = () => {\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [regionFilter, setRegionFilter] = useState(''); // State to hold region filter\n  const [typeFilter, setTypeFilter] = useState(''); // State to hold type filter\n\n  // Function to fetch all resources with optional filters\n  const fetchAllResources = () => {\n    const apiUrl = `http://localhost:8080/api/resources?region=${regionFilter}&type=${typeFilter}`; // Include filters in the URL\n    setLoading(true);\n    axios.get(apiUrl)\n      .then(response => {\n        console.log('Fetched all resources:', response.data); // Debugging\n        setResources(response.data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching resources:', error); // Debugging\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  // Function to fetch a specific resource by ID\n  const fetchResourceByID = (id) => {\n    const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n    setLoading(true);\n    axios.get(apiUrl)\n      .then(response => {\n        console.log('Fetched resource by ID:', response.data); // Debugging\n        setResources([response.data]); // Set the response as the only resource in the list\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching resource by ID:', error); // Debugging\n        setError('Failed to fetch resource by ID');\n        setLoading(false);\n      });\n  };\n\n  const handleRegionChange = (event) => {\n    setRegionFilter(event.target.value); // Update the region filter as the user types\n  };\n\n  const handleTypeChange = (event) => {\n    setTypeFilter(event.target.value); // Update the type filter as the user types\n  };\n\n  const handleIDChange = (event) => {\n    setResourceID(event.target.value); // Update the resource ID as the user types\n  };\n\n  const handleFetchByID = () => {\n    if (resourceID) {\n      setLoading(true); // Set loading state\n      fetchResourceByID(resourceID); // Fetch the resource by ID\n    } else {\n      setError('Please enter a valid resource ID');\n    }\n  };\n\n  const handleSearch = () => {\n    fetchAllResources(); // Trigger search when the button is clicked\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      {/* Input fields and buttons for search */}\n      <div>\n        <input\n          type=\"text\"\n          value={regionFilter}\n          onChange={handleRegionChange}\n          placeholder=\"Search by Region\"\n        />\n        <input\n          type=\"text\"\n          value={typeFilter}\n          onChange={handleTypeChange}\n          placeholder=\"Search by Type\"\n        />\n        <button onClick={handleSearch}>Search</button> {/* Only trigger search on click */}\n      </div>\n\n      {/* Input and button to fetch a resource by ID */}\n      <div>\n        <input\n          type=\"text\"\n          value={resourceID}\n          onChange={handleIDChange}\n          placeholder=\"Enter Resource ID\"\n        />\n        <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n      </div>\n\n      {/* Table to display the resources */}\n      {resources.length > 0 && (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Region</th>\n              <th>Type</th>\n              <th>Status</th>\n              <th>IP</th>\n              <th>Created Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {resources.map(resource => (\n              <tr key={resource.name}>\n                <td>{resource.name}</td>\n                <td>{resource.zone}</td>\n                <td>{resource.type}</td>\n                <td>{resource.status || 'N/A'}</td>\n                <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n                <td>{resource.creationTimestamp || 'N/A'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default ResourceTable;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}