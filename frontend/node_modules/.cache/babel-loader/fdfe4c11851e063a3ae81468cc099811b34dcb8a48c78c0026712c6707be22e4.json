{"ast":null,"code":"var _jsxFileName = \"/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n//     // Function to fetch resources by ID\n//     const fetchResourceByID = (id) => {\n//       setLoading(true);\n//       const apiUrl = `http://localhost:8080/api/resources/${id}`;\n//       axios.get(apiUrl)\n//         .then(response => {\n//           setResources(response.data); // Set the response as the only resource in the list\n//           setLoading(false);\n//         })\n//         .catch(error => {\n//           setError('Failed to fetch resource by ID');\n//           setLoading(false);\n//         });\n//     };\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n\n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResourceTable = () => {\n  _s();\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [region, setRegion] = useState(''); // State to hold the region input\n  const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n  // Function to fetch resources by ID\n  const fetchResourceByID = id => {\n    setLoading(true);\n    const apiUrl = `http://localhost:8080/api/resources/${id}`;\n    axios.get(apiUrl).then(response => {\n      console.log('Response data:', response.data);\n      setResources(response.data); // Set the response as the only resource in the list\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resource by ID');\n      setLoading(false);\n    });\n  };\n\n  // Function to fetch filtered resources based on region and type\n  const fetchResourcesByRegionAndType = () => {\n    setLoading(true);\n    let apiUrl = 'http://localhost:8080/api/resources';\n    const filters = [];\n    if (region) filters.push(`region=${region}`);\n    if (resourceType) filters.push(`type=${resourceType}`);\n    if (filters.length > 0) {\n      apiUrl += '?' + filters.join('&');\n    }\n    axios.get(apiUrl).then(response => {\n      setResources(response.data);\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    axios.get('http://localhost:8080/api/resources').then(response => {\n      setResources(response.data);\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n  useEffect(() => {\n    fetchAllResources(); // Fetch all resources when the component mounts\n  }, []);\n  const handleIDChange = event => {\n    setResourceID(event.target.value); // Update the resource ID as the user types\n  };\n  const handleRegionChange = event => {\n    setRegion(event.target.value); // Update the region as the user types\n  };\n  const handleTypeChange = event => {\n    setResourceType(event.target.value); // Update the type as the user types\n  };\n  const handleSearchByID = () => {\n    if (resourceID) {\n      fetchResourceByID(resourceID); // Fetch the resource by ID\n    } else {\n      setError('Please enter a valid resource ID');\n    }\n  };\n  const handleSearchByRegionAndType = () => {\n    fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceID,\n        onChange: handleIDChange,\n        placeholder: \"Enter ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchByID,\n        children: \"Get Resource by ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: region,\n        onChange: handleRegionChange,\n        placeholder: \"Enter Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceType,\n        onChange: handleTypeChange,\n        placeholder: \"Enter Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchByRegionAndType,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: resources.map(resource => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.zone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.status || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.creationTimestamp || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, resource.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(ResourceTable, \"oYtgyq+4PBlyn0R50l4K7NJPTNo=\");\n_c = ResourceTable;\nexport default ResourceTable;\nvar _c;\n$RefreshReg$(_c, \"ResourceTable\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ResourceTable","_s","resources","setResources","loading","setLoading","error","setError","resourceID","setResourceID","region","setRegion","resourceType","setResourceType","fetchResourceByID","id","apiUrl","get","then","response","console","log","data","catch","fetchResourcesByRegionAndType","filters","push","length","join","fetchAllResources","handleIDChange","event","target","value","handleRegionChange","handleTypeChange","handleSearchByID","handleSearchByRegionAndType","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","resource","name","zone","status","ipAddresses","creationTimestamp","_c","$RefreshReg$"],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n//     // Function to fetch resources by ID\n//     const fetchResourceByID = (id) => {\n//       setLoading(true);\n//       const apiUrl = `http://localhost:8080/api/resources/${id}`;\n//       axios.get(apiUrl)\n//         .then(response => {\n//           setResources(response.data); // Set the response as the only resource in the list\n//           setLoading(false);\n//         })\n//         .catch(error => {\n//           setError('Failed to fetch resource by ID');\n//           setLoading(false);\n//         });\n//     };\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n    \n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ResourceTable = () => {\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [region, setRegion] = useState(''); // State to hold the region input\n  const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n  // Function to fetch resources by ID\n  const fetchResourceByID = (id) => {\n    setLoading(true);\n    const apiUrl = `http://localhost:8080/api/resources/${id}`;\n    axios.get(apiUrl)\n      .then(response => {\n        console.log('Response data:', response.data); \n        setResources(response.data); // Set the response as the only resource in the list\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resource by ID');\n        setLoading(false);\n      });\n  };\n\n  // Function to fetch filtered resources based on region and type\n  const fetchResourcesByRegionAndType = () => {\n    setLoading(true);\n    \n    let apiUrl = 'http://localhost:8080/api/resources';\n    const filters = [];\n    if (region) filters.push(`region=${region}`);\n    if (resourceType) filters.push(`type=${resourceType}`);\n\n    if (filters.length > 0) {\n      apiUrl += '?' + filters.join('&');\n    }\n\n    axios.get(apiUrl)\n      .then(response => {\n        setResources(response.data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    axios.get('http://localhost:8080/api/resources')\n      .then(response => {\n        setResources(response.data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    fetchAllResources(); // Fetch all resources when the component mounts\n  }, []);\n\n  const handleIDChange = (event) => {\n    setResourceID(event.target.value); // Update the resource ID as the user types\n  };\n\n  const handleRegionChange = (event) => {\n    setRegion(event.target.value); // Update the region as the user types\n  };\n\n  const handleTypeChange = (event) => {\n    setResourceType(event.target.value); // Update the type as the user types\n  };\n\n  const handleSearchByID = () => {\n    if (resourceID) {\n      fetchResourceByID(resourceID); // Fetch the resource by ID\n    } else {\n      setError('Please enter a valid resource ID');\n    }\n  };\n\n  const handleSearchByRegionAndType = () => {\n    fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      {/* Input and button to fetch a resource by ID */}\n      <div>\n        <input\n          type=\"text\"\n          value={resourceID}\n          onChange={handleIDChange}\n          placeholder=\"Enter ID\"\n        />\n        <button onClick={handleSearchByID}>Get Resource by ID</button>\n      </div>\n\n      {/* Input fields for region and type */}\n      <div>\n        <input\n          type=\"text\"\n          value={region}\n          onChange={handleRegionChange}\n          placeholder=\"Enter Region\"\n        />\n        <input\n          type=\"text\"\n          value={resourceType}\n          onChange={handleTypeChange}\n          placeholder=\"Enter Type\"\n        />\n        <button onClick={handleSearchByRegionAndType}>Search</button>\n      </div>\n\n      {/* Table to display the resources */}\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Region</th>\n            <th>Type</th>\n            <th>Status</th>\n            <th>IP</th>\n            <th>Created Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {resources.map(resource => (\n            <tr key={resource.name}>\n              <td>{resource.name}</td>\n              <td>{resource.zone}</td>\n              <td>{resource.type}</td>\n              <td>{resource.status || 'N/A'}</td>\n              <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n              <td>{resource.creationTimestamp || 'N/A'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ResourceTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}