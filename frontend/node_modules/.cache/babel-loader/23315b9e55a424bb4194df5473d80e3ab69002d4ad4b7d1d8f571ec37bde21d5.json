{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n\n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;","map":{"version":3,"names":[],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n    \n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}