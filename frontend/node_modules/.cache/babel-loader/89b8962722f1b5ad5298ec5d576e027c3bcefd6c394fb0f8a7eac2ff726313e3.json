{"ast":null,"code":"var _jsxFileName = \"/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n\n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResourceTable = () => {\n  _s();\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [region, setRegion] = useState(''); // State to hold the region input\n  const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n  // Function to fetch filtered resources based on region and type\n  const fetchResourcesByRegionAndType = () => {\n    setLoading(true);\n    let apiUrl = 'http://localhost:8080/api/resources';\n    const filters = [];\n    if (region) filters.push(`region=${region}`);\n    if (resourceType) filters.push(`type=${resourceType}`);\n    if (filters.length > 0) {\n      apiUrl += '?' + filters.join('&');\n    }\n    axios.get(apiUrl).then(response => {\n      if (Array.isArray(response.data)) {\n        setResources(response.data);\n      } else {\n        setError('Data format is invalid.');\n      }\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    axios.get('http://localhost:8080/api/resources').then(response => {\n      if (Array.isArray(response.data)) {\n        setResources(response.data);\n      } else {\n        setError('Data format is invalid.');\n      }\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n  useEffect(() => {\n    fetchAllResources(); // Fetch all resources when the component mounts\n  }, []);\n  const handleRegionChange = event => {\n    setRegion(event.target.value); // Update the region as the user types\n  };\n  const handleTypeChange = event => {\n    setResourceType(event.target.value); // Update the type as the user types\n  };\n  const handleSearchByRegionAndType = () => {\n    fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: region,\n        onChange: handleRegionChange,\n        placeholder: \"Enter Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceType,\n        onChange: handleTypeChange,\n        placeholder: \"Enter Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchByRegionAndType,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: resources.length > 0 ? resources.map(resource => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.zone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.status || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.creationTimestamp || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this)]\n        }, resource.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"6\",\n            children: \"No resources found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(ResourceTable, \"oYtgyq+4PBlyn0R50l4K7NJPTNo=\");\n_c = ResourceTable;\nexport default ResourceTable;\nvar _c;\n$RefreshReg$(_c, \"ResourceTable\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ResourceTable","_s","resources","setResources","loading","setLoading","error","setError","resourceID","setResourceID","region","setRegion","resourceType","setResourceType","fetchResourcesByRegionAndType","apiUrl","filters","push","length","join","get","then","response","Array","isArray","data","catch","fetchAllResources","handleRegionChange","event","target","value","handleTypeChange","handleSearchByRegionAndType","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","resource","name","zone","status","ipAddresses","creationTimestamp","colSpan","_c","$RefreshReg$"],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n//   const [region, setRegion] = useState(''); // State to hold the region input\n//   const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n\n//   // Function to fetch filtered resources based on region and type\n//   const fetchResourcesByRegionAndType = () => {\n//     setLoading(true);\n    \n//     let apiUrl = 'http://localhost:8080/api/resources';\n//     const filters = [];\n//     if (region) filters.push(`region=${region}`);\n//     if (resourceType) filters.push(`type=${resourceType}`);\n\n//     if (filters.length > 0) {\n//       apiUrl += '?' + filters.join('&');\n//     }\n\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     setLoading(true);\n//     axios.get('http://localhost:8080/api/resources')\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources(); // Fetch all resources when the component mounts\n//   }, []);\n\n//   const handleRegionChange = (event) => {\n//     setRegion(event.target.value); // Update the region as the user types\n//   };\n\n//   const handleTypeChange = (event) => {\n//     setResourceType(event.target.value); // Update the type as the user types\n//   };\n\n//   const handleSearchByRegionAndType = () => {\n//     fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n\n//       {/* Input fields for region and type */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={region}\n//           onChange={handleRegionChange}\n//           placeholder=\"Enter Region\"\n//         />\n//         <input\n//           type=\"text\"\n//           value={resourceType}\n//           onChange={handleTypeChange}\n//           placeholder=\"Enter Type\"\n//         />\n//         <button onClick={handleSearchByRegionAndType}>Search</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ResourceTable = () => {\n  const [resources, setResources] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n  const [region, setRegion] = useState(''); // State to hold the region input\n  const [resourceType, setResourceType] = useState(''); // State to hold the type input\n\n  // Function to fetch filtered resources based on region and type\n  const fetchResourcesByRegionAndType = () => {\n    setLoading(true);\n    \n    let apiUrl = 'http://localhost:8080/api/resources';\n    const filters = [];\n    if (region) filters.push(`region=${region}`);\n    if (resourceType) filters.push(`type=${resourceType}`);\n\n    if (filters.length > 0) {\n      apiUrl += '?' + filters.join('&');\n    }\n\n    axios.get(apiUrl)\n      .then(response => {\n        if (Array.isArray(response.data)) {\n          setResources(response.data);\n        } else {\n          setError('Data format is invalid.');\n        }\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    axios.get('http://localhost:8080/api/resources')\n      .then(response => {\n        if (Array.isArray(response.data)) {\n          setResources(response.data);\n        } else {\n          setError('Data format is invalid.');\n        }\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    fetchAllResources(); // Fetch all resources when the component mounts\n  }, []);\n\n  const handleRegionChange = (event) => {\n    setRegion(event.target.value); // Update the region as the user types\n  };\n\n  const handleTypeChange = (event) => {\n    setResourceType(event.target.value); // Update the type as the user types\n  };\n\n  const handleSearchByRegionAndType = () => {\n    fetchResourcesByRegionAndType(); // Fetch resources filtered by region and type\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      {/* Input and button to fetch a resource by ID */}\n\n      {/* Input fields for region and type */}\n      <div>\n        <input\n          type=\"text\"\n          value={region}\n          onChange={handleRegionChange}\n          placeholder=\"Enter Region\"\n        />\n        <input\n          type=\"text\"\n          value={resourceType}\n          onChange={handleTypeChange}\n          placeholder=\"Enter Type\"\n        />\n        <button onClick={handleSearchByRegionAndType}>Search</button>\n      </div>\n\n      {/* Table to display the resources */}\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Region</th>\n            <th>Type</th>\n            <th>Status</th>\n            <th>IP</th>\n            <th>Created Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {resources.length > 0 ? (\n            resources.map(resource => (\n              <tr key={resource.name}>\n                <td>{resource.name}</td>\n                <td>{resource.zone}</td>\n                <td>{resource.type}</td>\n                <td>{resource.status || 'N/A'}</td>\n                <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n                <td>{resource.creationTimestamp || 'N/A'}</td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"6\">No resources found</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ResourceTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}