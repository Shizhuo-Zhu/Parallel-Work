{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;","map":{"version":3,"names":[],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\n\n\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}