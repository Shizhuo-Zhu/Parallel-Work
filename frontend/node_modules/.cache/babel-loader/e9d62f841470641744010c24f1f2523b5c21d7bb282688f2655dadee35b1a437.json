{"ast":null,"code":"var _jsxFileName = \"/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResourceTable = () => {\n  _s();\n  const [resources, setResources] = useState([]); // Ensure resources is an array by default\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState('');\n  const [region, setRegion] = useState('');\n  const [resourceType, setResourceType] = useState('');\n\n  // Function to fetch resources based on filters\n  const fetchFilteredResources = () => {\n    setLoading(true);\n    const apiUrl = `http://localhost:8080/api/resources?id=${resourceID}&region=${region}&type=${resourceType}`;\n    axios.get(apiUrl).then(response => {\n      // Ensure response is an array, even if no data is returned\n      const data = response.data || [];\n      setResources(data);\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    const apiUrl = 'http://localhost:8080/api/resources';\n    axios.get(apiUrl).then(response => {\n      setResources(response.data || []); // Default to empty array if no data\n      setLoading(false);\n    }).catch(error => {\n      setError('Failed to fetch resources');\n      setLoading(false);\n    });\n  };\n  const handleIDChange = event => {\n    setResourceID(event.target.value); // Update the resource ID\n  };\n  const handleRegionChange = event => {\n    setRegion(event.target.value); // Update region\n  };\n  const handleTypeChange = event => {\n    setResourceType(event.target.value); // Update type\n  };\n  const handleSearch = () => {\n    fetchFilteredResources(); // Fetch filtered resources based on the user input\n  };\n  useEffect(() => {\n    fetchAllResources();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceID,\n        onChange: handleIDChange,\n        placeholder: \"Enter Resource ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: region,\n        onChange: handleRegionChange,\n        placeholder: \"Enter Region\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: resourceType,\n        onChange: handleTypeChange,\n        placeholder: \"Enter Resource Type (instance/disk)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Created Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: resources.length > 0 ? resources.map(resource => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.zone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.status || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: resource.creationTimestamp || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this)]\n        }, resource.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"6\",\n            children: \"No resources found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(ResourceTable, \"/2o4TilBVptBgbbvBttAKAXHF6c=\");\n_c = ResourceTable;\nexport default ResourceTable;\nvar _c;\n$RefreshReg$(_c, \"ResourceTable\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ResourceTable","_s","resources","setResources","loading","setLoading","error","setError","resourceID","setResourceID","region","setRegion","resourceType","setResourceType","fetchFilteredResources","apiUrl","get","then","response","data","catch","fetchAllResources","handleIDChange","event","target","value","handleRegionChange","handleTypeChange","handleSearch","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","length","map","resource","name","zone","status","ipAddresses","join","creationTimestamp","colSpan","_c","$RefreshReg$"],"sources":["/Users/shizhuo/Desktop/GCP/frontend/src/ResourceTable.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const apiUrl = process.env.REACT_APP_BACKEND_URL + '/api/resources';\n\n//     // Fetch data from the backend\n//     axios.get(apiUrl)\n//       .then(response => {\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <th>Name</th>\n//           <th>Region</th>\n//           <th>Type</th> \n//           <th>Status</th>\n//           <th>IP</th>\n//           <th>Created Time</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {resources.map(resource => (\n//           <tr key={resource.name}>\n//             <td>{resource.name}</td>\n//             <td>{resource.zone}</td>\n//             <td>{resource.type}</td> \n//             <td>{resource.status || 'N/A'}</td>\n//             <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//             <td>{resource.creationTimestamp || 'N/A'}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default ResourceTable;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const ResourceTable = () => {\n//   const [resources, setResources] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [resourceID, setResourceID] = useState(''); // State to hold the resource ID input\n\n//   // Function to fetch all resources\n//   const fetchAllResources = () => {\n//     const apiUrl = 'http://localhost:8080/api/resources'; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched all resources:', response.data); // Debugging\n//         setResources(response.data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resources:', error); // Debugging\n//         setError('Failed to fetch resources');\n//         setLoading(false);\n//       });\n//   };\n\n//   // Function to fetch a specific resource by ID\n//   const fetchResourceByID = (id) => {\n//     const apiUrl = `http://localhost:8080/api/resources/${id}`; // Adjust the URL to your backend\n//     setLoading(true);\n//     axios.get(apiUrl)\n//       .then(response => {\n//         console.log('Fetched resource by ID:', response.data); // Debugging\n//         setResources([response.data]); // Set the response as the only resource in the list\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching resource by ID:', error); // Debugging\n//         setError('Failed to fetch resource by ID');\n//         setLoading(false);\n//       });\n//   };\n\n//   useEffect(() => {\n//     fetchAllResources();\n//   }, []);\n\n//   const handleIDChange = (event) => {\n//     setResourceID(event.target.value); // Update the resource ID as the user types\n//   };\n\n//   const handleFetchByID = () => {\n//     if (resourceID) {\n//       setLoading(true); // Set loading state\n//       fetchResourceByID(resourceID); // Fetch the resource by ID\n//     } else {\n//       setError('Please enter a valid resource ID');\n//     }\n//   };\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   return (\n//     <div>\n//       {/* Input and button to fetch a resource by ID */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           value={resourceID}\n//           onChange={handleIDChange}\n//           placeholder=\"Enter Resource ID\"\n//         />\n//         <button onClick={handleFetchByID}>Fetch Resource by ID</button>\n//       </div>\n\n//       {/* Table to display the resources */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Region</th>\n//             <th>Type</th>\n//             <th>Status</th>\n//             <th>IP</th>\n//             <th>Created Time</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {resources.map(resource => (\n//             <tr key={resource.name}>\n//               <td>{resource.name}</td>\n//               <td>{resource.zone}</td>\n//               <td>{resource.type}</td>\n//               <td>{resource.status || 'N/A'}</td>\n//               <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n//               <td>{resource.creationTimestamp || 'N/A'}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResourceTable;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ResourceTable = () => {\n  const [resources, setResources] = useState([]); // Ensure resources is an array by default\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [resourceID, setResourceID] = useState('');\n  const [region, setRegion] = useState('');\n  const [resourceType, setResourceType] = useState('');\n\n  // Function to fetch resources based on filters\n  const fetchFilteredResources = () => {\n    setLoading(true);\n    const apiUrl = `http://localhost:8080/api/resources?id=${resourceID}&region=${region}&type=${resourceType}`;\n    axios.get(apiUrl)\n      .then(response => {\n        // Ensure response is an array, even if no data is returned\n        const data = response.data || [];\n        setResources(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  // Function to fetch all resources\n  const fetchAllResources = () => {\n    setLoading(true);\n    const apiUrl = 'http://localhost:8080/api/resources';\n    axios.get(apiUrl)\n      .then(response => {\n        setResources(response.data || []); // Default to empty array if no data\n        setLoading(false);\n      })\n      .catch(error => {\n        setError('Failed to fetch resources');\n        setLoading(false);\n      });\n  };\n\n  const handleIDChange = (event) => {\n    setResourceID(event.target.value); // Update the resource ID\n  };\n\n  const handleRegionChange = (event) => {\n    setRegion(event.target.value); // Update region\n  };\n\n  const handleTypeChange = (event) => {\n    setResourceType(event.target.value); // Update type\n  };\n\n  const handleSearch = () => {\n    fetchFilteredResources(); // Fetch filtered resources based on the user input\n  };\n\n  useEffect(() => {\n    fetchAllResources();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      {/* Search inputs for region, type, and ID */}\n      <div>\n        <input\n          type=\"text\"\n          value={resourceID}\n          onChange={handleIDChange}\n          placeholder=\"Enter Resource ID\"\n        />\n        <input\n          type=\"text\"\n          value={region}\n          onChange={handleRegionChange}\n          placeholder=\"Enter Region\"\n        />\n        <input\n          type=\"text\"\n          value={resourceType}\n          onChange={handleTypeChange}\n          placeholder=\"Enter Resource Type (instance/disk)\"\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n\n      {/* Table to display the resources */}\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Region</th>\n            <th>Type</th>\n            <th>Status</th>\n            <th>IP</th>\n            <th>Created Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {resources.length > 0 ? (\n            resources.map(resource => (\n              <tr key={resource.name}>\n                <td>{resource.name}</td>\n                <td>{resource.zone}</td>\n                <td>{resource.type}</td>\n                <td>{resource.status || 'N/A'}</td>\n                <td>{resource.ipAddresses && resource.ipAddresses.length > 0 ? resource.ipAddresses.join(', ') : 'N/A'}</td>\n                <td>{resource.creationTimestamp || 'N/A'}</td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"6\">No resources found</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ResourceTable;\n\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}